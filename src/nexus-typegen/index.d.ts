/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  DigimonAttribute: "Dark" | "Earth" | "Electric" | "Fire" | "Light" | "Neutral" | "Plant" | "Water" | "Wind"
  DigimonState: "Armor" | "Baby" | "Champion" | "In-Training" | "Mega" | "None" | "Rookie" | "Ultimate" | "Ultra"
  DigimonType: "Data" | "Free" | "Vaccine" | "Virus"
  MoveAttribute: "Dark" | "Earth" | "Electric" | "Fire" | "Light" | "Neutral" | "Plant" | "Water" | "Wind"
  MoveType: "Direct" | "Fixed" | "Magic" | "Physical" | "Support"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Ability: { // root type
    description: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  Digimon: { // root type
    attribute: NexusGenEnums['DigimonAttribute']; // DigimonAttribute!
    digimonType: NexusGenEnums['DigimonType']; // DigimonType!
    equipSlot: number; // Int!
    icon: string; // String!
    id: string; // ID!
    img: string; // String!
    memory: number; // Int!
    name: string; // String!
    no: string; // String!
    state: NexusGenEnums['DigimonState']; // DigimonState!
  }
  Move: { // root type
    attribute: NexusGenEnums['MoveAttribute']; // MoveAttribute!
    description: string; // String!
    id: string; // ID!
    inheritable: boolean; // Boolean!
    name: string; // String!
    power: number; // Int!
    sp: number; // Int!
    type: NexusGenEnums['MoveType']; // MoveType!
  }
  Query: {};
}

export interface NexusGenInterfaces {
  DigimonInfo: NexusGenRootTypes['Digimon'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Ability: { // field return type
    description: string; // String!
    digimons: Array<NexusGenRootTypes['DigimonInfo'] | null> | null; // [DigimonInfo]
    id: string; // ID!
    name: string; // String!
  }
  Digimon: { // field return type
    ability: NexusGenRootTypes['Ability']; // Ability!
    attribute: NexusGenEnums['DigimonAttribute']; // DigimonAttribute!
    digimonType: NexusGenEnums['DigimonType']; // DigimonType!
    equipSlot: number; // Int!
    icon: string; // String!
    id: string; // ID!
    img: string; // String!
    memory: number; // Int!
    name: string; // String!
    no: string; // String!
    state: NexusGenEnums['DigimonState']; // DigimonState!
  }
  Move: { // field return type
    attribute: NexusGenEnums['MoveAttribute']; // MoveAttribute!
    description: string; // String!
    id: string; // ID!
    inheritable: boolean; // Boolean!
    name: string; // String!
    power: number; // Int!
    sp: number; // Int!
    type: NexusGenEnums['MoveType']; // MoveType!
  }
  Query: { // field return type
    abilities: NexusGenRootTypes['Ability'][]; // [Ability!]!
    digimons: Array<NexusGenRootTypes['Digimon'] | null>; // [Digimon]!
    moves: NexusGenRootTypes['Move'][]; // [Move!]!
  }
  DigimonInfo: { // field return type
    icon: string; // String!
    id: string; // ID!
    img: string; // String!
    name: string; // String!
    no: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Ability: { // field return type name
    description: 'String'
    digimons: 'DigimonInfo'
    id: 'ID'
    name: 'String'
  }
  Digimon: { // field return type name
    ability: 'Ability'
    attribute: 'DigimonAttribute'
    digimonType: 'DigimonType'
    equipSlot: 'Int'
    icon: 'String'
    id: 'ID'
    img: 'String'
    memory: 'Int'
    name: 'String'
    no: 'String'
    state: 'DigimonState'
  }
  Move: { // field return type name
    attribute: 'MoveAttribute'
    description: 'String'
    id: 'ID'
    inheritable: 'Boolean'
    name: 'String'
    power: 'Int'
    sp: 'Int'
    type: 'MoveType'
  }
  Query: { // field return type name
    abilities: 'Ability'
    digimons: 'Digimon'
    moves: 'Move'
  }
  DigimonInfo: { // field return type name
    icon: 'String'
    id: 'ID'
    img: 'String'
    name: 'String'
    no: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
  DigimonInfo: "Digimon"
}

export interface NexusGenTypeInterfaces {
  Digimon: "DigimonInfo"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "DigimonInfo";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}