/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as AbilityEntity from "./../core/ability/entitys/ability-entity"
import type * as DigimonEntity from "./../core/digimon/entitys/digimon-entity"
import type * as MoveEntity from "./../core/move/entitys/move-entity"
import type { Context as context } from "./../graphql/context"
import type { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  DigimonAttribute: "Dark" | "Earth" | "Electric" | "Fire" | "Light" | "Neutral" | "Plant" | "Water" | "Wind"
  DigimonStage: "Armor" | "Baby" | "Champion" | "In-Training" | "Mega" | "None" | "Rookie" | "Ultimate" | "Ultra"
  DigimonType: "Data" | "Free" | "Vaccine" | "Virus"
  MoveAttribute: "Dark" | "Earth" | "Electric" | "Fire" | "Light" | "Neutral" | "Plant" | "Water" | "Wind"
  MoveType: "Direct" | "Fixed" | "Magic" | "Physical" | "Support"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Ability: AbilityEntity.Ability;
  AbilityInfo: { // root type
    description: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  Digimon: DigimonEntity.Digimon;
  DigimonEvoFrom: DigimonEntity.DigimonEvoFrom;
  DigimonEvoInto: DigimonEntity.DigimonEvoInto;
  DigimonEvoIntoRequire: DigimonEntity.DigimonEvoIntoRequire;
  DigimonEvoIntoRequireJogress: { // root type
    id: string; // ID!
  }
  DigimonInfo: DigimonEntity.DigimonInfo;
  DigimonStat: DigimonEntity.DigimonStat;
  Move: MoveEntity.Move;
  MoveDigimon: { // root type
    attribute: NexusGenEnums['MoveAttribute']; // MoveAttribute!
    description: string; // String!
    id: string; // ID!
    inheritable: boolean; // Boolean!
    lvl?: number | null; // Int
    name: string; // String!
    power: number; // Int!
    sp: number; // Int!
    type: NexusGenEnums['MoveType']; // MoveType!
  }
  Query: {};
}

export interface NexusGenInterfaces {
  AbilityInterface: NexusGenRootTypes['Ability'] | NexusGenRootTypes['AbilityInfo'];
  DigimonInfoInterface: NexusGenRootTypes['Digimon'] | NexusGenRootTypes['DigimonEvoFrom'] | NexusGenRootTypes['DigimonEvoInto'] | NexusGenRootTypes['DigimonEvoIntoRequireJogress'] | NexusGenRootTypes['DigimonInfo'];
  DigimonStatInterface: NexusGenRootTypes['DigimonStat'];
  MoveInterface: NexusGenRootTypes['Move'] | NexusGenRootTypes['MoveDigimon'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Ability: { // field return type
    description: string; // String!
    digimons: NexusGenRootTypes['DigimonInfo'][]; // [DigimonInfo!]!
    id: string; // ID!
    name: string; // String!
  }
  AbilityInfo: { // field return type
    description: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  Digimon: { // field return type
    ability: NexusGenRootTypes['AbilityInfo']; // AbilityInfo!
    attribute: NexusGenEnums['DigimonAttribute']; // DigimonAttribute!
    balanceStat: NexusGenRootTypes['DigimonStat']; // DigimonStat!
    digimonType: NexusGenEnums['DigimonType']; // DigimonType!
    equipSlot: number; // Int!
    evoFrom: Array<NexusGenRootTypes['DigimonEvoFrom'] | null> | null; // [DigimonEvoFrom]
    evoInto: Array<NexusGenRootTypes['DigimonEvoInto'] | null> | null; // [DigimonEvoInto]
    icon: string; // String!
    id: string; // ID!
    img: string; // String!
    memory: number; // Int!
    moves: NexusGenRootTypes['MoveDigimon'][]; // [MoveDigimon!]!
    name: string; // String!
    no: number; // Int!
    stage: NexusGenEnums['DigimonStage']; // DigimonStage!
    stats: NexusGenRootTypes['DigimonStat'][]; // [DigimonStat!]!
  }
  DigimonEvoFrom: { // field return type
    icon: string; // String!
    id: string; // ID!
    img: string; // String!
    name: string; // String!
    no: number; // Int!
  }
  DigimonEvoInto: { // field return type
    description: string; // String!
    icon: string; // String!
    id: string; // ID!
    img: string; // String!
    lvl: number; // Int!
    name: string; // String!
    no: number; // Int!
    require: NexusGenRootTypes['DigimonEvoIntoRequire'] | null; // DigimonEvoIntoRequire
  }
  DigimonEvoIntoRequire: { // field return type
    abi: number | null; // Int
    atk: number | null; // Int
    cam: number | null; // Int
    changeMode: boolean | null; // Boolean
    def: number | null; // Int
    dlc: boolean | null; // Boolean
    hackerCleared: boolean | null; // Boolean
    hp: number | null; // Int
    int: number | null; // Int
    item: string | null; // String
    jogress: NexusGenRootTypes['DigimonEvoIntoRequireJogress'] | null; // DigimonEvoIntoRequireJogress
    sp: number | null; // Int
    spd: number | null; // Int
  }
  DigimonEvoIntoRequireJogress: { // field return type
    icon: string; // String!
    id: string; // ID!
    img: string; // String!
    name: string; // String!
    no: number; // Int!
  }
  DigimonInfo: { // field return type
    icon: string; // String!
    id: string; // ID!
    img: string; // String!
    name: string; // String!
    no: number; // Int!
  }
  DigimonStat: { // field return type
    atk: number; // Int!
    def: number; // Int!
    hp: number; // Int!
    int: number; // Int!
    lvl: number; // Int!
    sp: number; // Int!
    spd: number; // Int!
  }
  Move: { // field return type
    attribute: NexusGenEnums['MoveAttribute']; // MoveAttribute!
    description: string; // String!
    digimons: NexusGenRootTypes['DigimonInfo'][]; // [DigimonInfo!]!
    id: string; // ID!
    inheritable: boolean; // Boolean!
    name: string; // String!
    power: number; // Int!
    sp: number; // Int!
    type: NexusGenEnums['MoveType']; // MoveType!
  }
  MoveDigimon: { // field return type
    attribute: NexusGenEnums['MoveAttribute']; // MoveAttribute!
    description: string; // String!
    id: string; // ID!
    inheritable: boolean; // Boolean!
    lvl: number | null; // Int
    name: string; // String!
    power: number; // Int!
    sp: number; // Int!
    type: NexusGenEnums['MoveType']; // MoveType!
  }
  Query: { // field return type
    abilities: NexusGenRootTypes['Ability'][]; // [Ability!]!
    digimon: NexusGenRootTypes['Digimon']; // Digimon!
    digimons: NexusGenRootTypes['Digimon'][]; // [Digimon!]!
    moves: NexusGenRootTypes['Move'][]; // [Move!]!
  }
  AbilityInterface: { // field return type
    description: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  DigimonInfoInterface: { // field return type
    icon: string; // String!
    id: string; // ID!
    img: string; // String!
    name: string; // String!
    no: number; // Int!
  }
  DigimonStatInterface: { // field return type
    atk: number; // Int!
    def: number; // Int!
    hp: number; // Int!
    int: number; // Int!
    lvl: number; // Int!
    sp: number; // Int!
    spd: number; // Int!
  }
  MoveInterface: { // field return type
    attribute: NexusGenEnums['MoveAttribute']; // MoveAttribute!
    description: string; // String!
    id: string; // ID!
    inheritable: boolean; // Boolean!
    name: string; // String!
    power: number; // Int!
    sp: number; // Int!
    type: NexusGenEnums['MoveType']; // MoveType!
  }
}

export interface NexusGenFieldTypeNames {
  Ability: { // field return type name
    description: 'String'
    digimons: 'DigimonInfo'
    id: 'ID'
    name: 'String'
  }
  AbilityInfo: { // field return type name
    description: 'String'
    id: 'ID'
    name: 'String'
  }
  Digimon: { // field return type name
    ability: 'AbilityInfo'
    attribute: 'DigimonAttribute'
    balanceStat: 'DigimonStat'
    digimonType: 'DigimonType'
    equipSlot: 'Int'
    evoFrom: 'DigimonEvoFrom'
    evoInto: 'DigimonEvoInto'
    icon: 'String'
    id: 'ID'
    img: 'String'
    memory: 'Int'
    moves: 'MoveDigimon'
    name: 'String'
    no: 'Int'
    stage: 'DigimonStage'
    stats: 'DigimonStat'
  }
  DigimonEvoFrom: { // field return type name
    icon: 'String'
    id: 'ID'
    img: 'String'
    name: 'String'
    no: 'Int'
  }
  DigimonEvoInto: { // field return type name
    description: 'String'
    icon: 'String'
    id: 'ID'
    img: 'String'
    lvl: 'Int'
    name: 'String'
    no: 'Int'
    require: 'DigimonEvoIntoRequire'
  }
  DigimonEvoIntoRequire: { // field return type name
    abi: 'Int'
    atk: 'Int'
    cam: 'Int'
    changeMode: 'Boolean'
    def: 'Int'
    dlc: 'Boolean'
    hackerCleared: 'Boolean'
    hp: 'Int'
    int: 'Int'
    item: 'String'
    jogress: 'DigimonEvoIntoRequireJogress'
    sp: 'Int'
    spd: 'Int'
  }
  DigimonEvoIntoRequireJogress: { // field return type name
    icon: 'String'
    id: 'ID'
    img: 'String'
    name: 'String'
    no: 'Int'
  }
  DigimonInfo: { // field return type name
    icon: 'String'
    id: 'ID'
    img: 'String'
    name: 'String'
    no: 'Int'
  }
  DigimonStat: { // field return type name
    atk: 'Int'
    def: 'Int'
    hp: 'Int'
    int: 'Int'
    lvl: 'Int'
    sp: 'Int'
    spd: 'Int'
  }
  Move: { // field return type name
    attribute: 'MoveAttribute'
    description: 'String'
    digimons: 'DigimonInfo'
    id: 'ID'
    inheritable: 'Boolean'
    name: 'String'
    power: 'Int'
    sp: 'Int'
    type: 'MoveType'
  }
  MoveDigimon: { // field return type name
    attribute: 'MoveAttribute'
    description: 'String'
    id: 'ID'
    inheritable: 'Boolean'
    lvl: 'Int'
    name: 'String'
    power: 'Int'
    sp: 'Int'
    type: 'MoveType'
  }
  Query: { // field return type name
    abilities: 'Ability'
    digimon: 'Digimon'
    digimons: 'Digimon'
    moves: 'Move'
  }
  AbilityInterface: { // field return type name
    description: 'String'
    id: 'ID'
    name: 'String'
  }
  DigimonInfoInterface: { // field return type name
    icon: 'String'
    id: 'ID'
    img: 'String'
    name: 'String'
    no: 'Int'
  }
  DigimonStatInterface: { // field return type name
    atk: 'Int'
    def: 'Int'
    hp: 'Int'
    int: 'Int'
    lvl: 'Int'
    sp: 'Int'
    spd: 'Int'
  }
  MoveInterface: { // field return type name
    attribute: 'MoveAttribute'
    description: 'String'
    id: 'ID'
    inheritable: 'Boolean'
    name: 'String'
    power: 'Int'
    sp: 'Int'
    type: 'MoveType'
  }
}

export interface NexusGenArgTypes {
  Query: {
    digimon: { // args
      id?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  AbilityInterface: "Ability" | "AbilityInfo"
  DigimonInfoInterface: "Digimon" | "DigimonEvoFrom" | "DigimonEvoInto" | "DigimonEvoIntoRequireJogress" | "DigimonInfo"
  DigimonStatInterface: "DigimonStat"
  MoveInterface: "Move" | "MoveDigimon"
}

export interface NexusGenTypeInterfaces {
  Ability: "AbilityInterface"
  AbilityInfo: "AbilityInterface"
  Digimon: "DigimonInfoInterface"
  DigimonEvoFrom: "DigimonInfoInterface"
  DigimonEvoInto: "DigimonInfoInterface"
  DigimonEvoIntoRequireJogress: "DigimonInfoInterface"
  DigimonInfo: "DigimonInfoInterface"
  DigimonStat: "DigimonStatInterface"
  Move: "MoveInterface"
  MoveDigimon: "MoveInterface"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "AbilityInterface" | "DigimonInfoInterface" | "DigimonStatInterface" | "MoveInterface";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}